"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgame_server"] = self["webpackChunkgame_server"] || []).push([["src_entities_mjs-src_player_mjs-src_texture-data_mjs"],{

/***/ "./src/collision-map.mjs":
/*!*******************************!*\
  !*** ./src/collision-map.mjs ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getCollisionMap\": () => (/* binding */ getCollisionMap),\n/* harmony export */   \"getColorAtPos\": () => (/* binding */ getColorAtPos),\n/* harmony export */   \"getGroundHeightByX\": () => (/* binding */ getGroundHeightByX),\n/* harmony export */   \"setCollisionMap\": () => (/* binding */ setCollisionMap)\n/* harmony export */ });\nlet collisionMap = null\nlet heightMap = []\n\nconst setCollisionMap = (texture) => {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  canvas.width = texture.width\n  canvas.height = texture.height\n  ctx.drawImage(texture, 0, 0, texture.width, texture.height)\n  const imageData = ctx.getImageData(0, 0, texture.width, texture.height).data\n  collisionMap = []\n  for (let x = 0; x < texture.width; x++) {\n    const row = []\n    for (let y = 0; y < texture.height; y++) {\n      const index = (Math.floor(y) * texture.width + Math.floor(x)) * 4\n      row.push({\n        r: imageData[index],\n        g: imageData[index + 1],\n        b: imageData[index + 2],\n        a: imageData[index + 3]\n      })\n    }\n    collisionMap.push(row)\n  }\n\n  for (let x = 0; x < texture.width; x++) {\n    let height = 639\n    for (let y = 0; y < texture.height; y++) {\n      const color = collisionMap[x][y]\n      if (color.r === 0 && color.g === 0 && color.b === 0 && color.a === 255) {\n        height = y\n        break\n      }\n    }\n    heightMap[x] = height\n  }\n}\n\nconst getCollisionMap = () => collisionMap\n\nconst getColorAtPos = (x, y) => {\n  if (collisionMap[x][y]) {\n    console.log(collisionMap[x][y])\n  }\n}\n\nconst getGroundHeightByX = x => {\n  return heightMap[x] ?? 479\n  // console.log('_HEIGHT_', height)\n}\n\n\n//# sourceURL=webpack://game-server/./src/collision-map.mjs?");

/***/ }),

/***/ "./src/config.mjs":
/*!************************!*\
  !*** ./src/config.mjs ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DIRECTION\": () => (/* binding */ DIRECTION)\n/* harmony export */ });\nconst DIRECTION = {\n  LEFT: -1,\n  RIGHT: 1,\n}\n\n\n//# sourceURL=webpack://game-server/./src/config.mjs?");

/***/ }),

/***/ "./src/controller.mjs":
/*!****************************!*\
  !*** ./src/controller.mjs ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addActionDownListener\": () => (/* binding */ addActionDownListener),\n/* harmony export */   \"addActionUpListener\": () => (/* binding */ addActionUpListener),\n/* harmony export */   \"clearKeys\": () => (/* binding */ clearKeys),\n/* harmony export */   \"getActionState\": () => (/* binding */ getActionState),\n/* harmony export */   \"handleKeyDown\": () => (/* binding */ handleKeyDown),\n/* harmony export */   \"handleKeyUp\": () => (/* binding */ handleKeyUp),\n/* harmony export */   \"registerActions\": () => (/* binding */ registerActions),\n/* harmony export */   \"removeActionDownListener\": () => (/* binding */ removeActionDownListener),\n/* harmony export */   \"removeActionUpListener\": () => (/* binding */ removeActionUpListener)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n\n\nconst actionDownEmitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter()\nconst actionUpEmitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter()\n\n// Stores the state of each action as a true or false value\n// e.g. forward: true\nlet actionStates = {}\n// Stores the mapping between keys and actions\n// e.g. 47: 'forward'\nconst keyMapping = {}\n\n// As part of init, all of the actions being listened for should be registered.\nconst registerActions = actions => {\n  actions.forEach(({ name, keycode }) => {\n    keyMapping[keycode] = name\n    actionStates[name] = false\n  })\n}\n\nconst getActionState = name => {\n  return actionStates[name] || false\n}\n\nconst handleKeyDown = e => {\n  const actionName = keyMapping[e.which]\n  if (actionName) {\n    const prevState = actionStates[actionName]\n    if (!prevState) {\n      actionDownEmitter.emit(actionName)\n    }\n    actionStates[actionName] = true\n  }\n}\n\nconst handleKeyUp = e => {\n  const actionName = keyMapping[e.which]\n  if (actionName) {\n    actionStates[actionName] = false\n    actionUpEmitter.emit(actionName)\n  }\n}\n\nconst clearKeys = e => {\n  actionStates = {}\n}\n\nconst addActionDownListener = (actionName, callback) => {\n  actionDownEmitter.addListener(actionName, callback)\n}\n\nconst addActionUpListener = (actionName, callback) => {\n  actionUpEmitter.addListener(actionName, callback)\n}\n\nconst removeActionDownListener = (actionName, callback) => {\n  actionDownEmitter.removeListener(actionName, callback)\n}\n\nconst removeActionUpListener = (actionName, callback) => {\n  actionUpEmitter.removeListener(actionName, callback)\n}\n\n\n//# sourceURL=webpack://game-server/./src/controller.mjs?");

/***/ }),

/***/ "./src/entities.mjs":
/*!**************************!*\
  !*** ./src/entities.mjs ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addEntity\": () => (/* binding */ addEntity),\n/* harmony export */   \"debugRenderEntities\": () => (/* binding */ debugRenderEntities),\n/* harmony export */   \"getEntities\": () => (/* binding */ getEntities),\n/* harmony export */   \"renderEntities\": () => (/* binding */ renderEntities),\n/* harmony export */   \"updateEntities\": () => (/* binding */ updateEntities)\n/* harmony export */ });\nlet entities = []\nlet deadEntities = []\n\nconst addEntity = entity => {\n  entities.push(entity)\n}\n\nconst updateEntities = (dt) => {\n  entities.forEach(entity => {\n    entity.update(dt)\n  })\n  if (entities.some(entity => entity.dead)) {\n    entities = entities.filter(entity => !entity.dead)\n    deadEntities = entities.filter(entity => entity.dead)\n  }\n}\n\nconst renderEntities = (ctx, canvas) => {\n  entities.forEach(entity => {\n    entity.render(ctx, canvas)\n  })\n}\n\nconst debugRenderEntities = (ctx, canvas) => {\n  entities.forEach(entity => {\n    entity.debugRender(ctx, canvas)\n  })\n}\n\nconst getEntities = () => entities\n\n\n//# sourceURL=webpack://game-server/./src/entities.mjs?");

/***/ }),

/***/ "./src/player.mjs":
/*!************************!*\
  !*** ./src/player.mjs ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createPlayer\": () => (/* binding */ createPlayer)\n/* harmony export */ });\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.mjs */ \"./src/config.mjs\");\n/* harmony import */ var _textures_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./textures.mjs */ \"./src/textures.mjs\");\n/* harmony import */ var _controller_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controller.mjs */ \"./src/controller.mjs\");\n/* harmony import */ var _collision_map_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./collision-map.mjs */ \"./src/collision-map.mjs\");\n\n\n\n\n\nconst PLAYER_WIDTH = 32\nconst PLAYER_HEIGHT = 50\n\n// const GROUND = 480 - 245\n// const MAX_Y_SPEED = 60\n// const INITIAL_JUMP_SPEED = -10\nconst MOVE_SPEED = 200\nconst LEFT = -1\nconst RIGHT = 1\n// const GRAVITY = 35\nconst FRAMES = 8\nconst FALL_TIME = 0.25\n\nconst createPlayer = (x, y, gravity, initialJumpSpeed, maxYSpeed) => {\n  const GRAVITY = gravity || 1800\n  const INITIAL_JUMP_SPEED = initialJumpSpeed || -600\n  const MAX_Y_SPEED = maxYSpeed || 1200\n  // const GROUND = y\n\n  const player = {\n    x,\n    y,\n    startX: x,\n    startY: y,\n    facing: _config_mjs__WEBPACK_IMPORTED_MODULE_0__.DIRECTION.RIGHT,\n    sprite: 'idle',\n    xSpeed: 0,\n    ySpeed: 0,\n    frame: 0,\n    accumulator: 0,\n    fps: 8,\n    grounded: false,\n    groundedCounter: 0,\n    gravity: true,\n    collider: {\n      x: 0,\n      y: 0,\n      width: PLAYER_WIDTH * 2,\n      height: PLAYER_HEIGHT * 2,\n    }\n  }\n\n  player.setSprite = (sprite) => {\n    player.sprite = sprite\n    player.accumulator = 0\n    player.frame = 0\n    player.fps = 8\n  }\n\n  player.getCollider = () => ({\n    x: player.x + player.collider.x,\n    y: player.y + player.collider.y,\n    width: player.collider.width,\n    height: player.collider.height,\n  })\n\n  player.states = {\n    idle: (dt) => {\n      if (!player.grounded) {\n        player.setSprite('fall')\n        return\n      }\n\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('down')) {\n        player.crouch()\n        return\n      }\n\n      if (\n        ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') || (0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) &&\n        !((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && (0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right'))\n      ) {\n        player.setSprite('running')\n      }\n    },\n    running: (dt) => {\n      if (!player.grounded) {\n        player.setSprite('fall')\n        return\n      }\n\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('down')) {\n        player.crouch()\n        return\n      }\n\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && (0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) {\n        player.xSpeed = 0\n        player.setSprite('idle')\n        return\n      } else if (!(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) {\n        player.xSpeed = 0\n        player.setSprite('idle')\n        return\n      }\n\n      player.accumulator += dt\n      while (player.accumulator >= (1 / player.fps)) {\n        player.accumulator -= (1 / player.fps)\n        player.frame++\n      }\n      player.frame = player.frame % FRAMES\n\n      player.move()\n    },\n    push: (dt) => {\n      if (!player.grounded) {\n        player.setSprite('fall')\n        return\n      }\n\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('down')) {\n        player.crouch()\n        return\n      }\n\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && (0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) {\n        player.xSpeed = 0\n        player.setSprite('idle')\n        return\n      } else if (!(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) {\n        player.xSpeed = 0\n        player.setSprite('idle')\n        return\n      }\n\n      player.accumulator += dt\n      while (player.accumulator >= (1 / player.fps)) {\n        player.accumulator -= (1 / player.fps)\n        player.frame++\n      }\n      player.frame = player.frame % FRAMES\n\n      player.move()\n    },\n    jump: (dt) => {\n      if (player.ySpeed >= 0) {\n        player.setSprite('fall')\n      }\n\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) {\n        player.facing = LEFT\n        player.xSpeed = -MOVE_SPEED\n      } else if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left')) {\n        player.facing = RIGHT\n        player.xSpeed = MOVE_SPEED\n      } else {\n        player.xSpeed = 0\n      }\n    },\n    fall: (dt) => {\n      player.accumulator += dt\n      while (player.accumulator >= (1 / player.fps)) {\n        player.accumulator -= (1 / player.fps)\n        player.frame++\n      }\n      if (player.frame > 1) {\n        player.frame = 1\n      }\n\n      if (player.grounded) {\n        player.setSprite('land')\n        player.fps = 12\n      }\n\n      player.move()\n    },\n    land: (dt) => {\n      if (!player.grounded) {\n        player.setSprite('fall')\n        return\n      }\n\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('down')) {\n        player.crouch()\n        return\n      }\n\n      player.accumulator += dt\n      while (player.accumulator >= (1 / player.fps)) {\n        player.accumulator -= (1 / player.fps)\n        player.frame++\n      }\n      if (player.frame > 0) {\n        if (\n          ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') || (0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) &&\n          !((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && (0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right'))\n        ) {\n          player.setSprite('running')\n          return\n        } else {\n          player.setSprite('idle')\n          player.xSpeed = 0\n          return\n        }\n      }\n\n      player.move()\n    },\n    vault: (dt) => {\n      player.accumulator += dt\n      while (player.accumulator >= (1 / player.fps)) {\n        player.accumulator -= (1 / player.fps)\n        player.frame++\n      }\n      if (player.frame > 0) {\n        player.frame = 0\n        player.setSprite('land')\n        player.fps = 12\n        const GROUND = (0,_collision_map_mjs__WEBPACK_IMPORTED_MODULE_3__.getGroundHeightByX)(Math.floor(player.x + PLAYER_WIDTH)) - (PLAYER_HEIGHT * 2)\n        player.y = GROUND\n        player.gravity = true\n      }\n    },\n    crouch: (dt) => {\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) {\n        player.facing = LEFT\n      } else if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left')) {\n        player.facing = RIGHT\n      }\n\n      if (!player.grounded) {\n        player.setSprite('fall')\n        return\n      }\n\n      player.accumulator += dt\n      while (player.accumulator >= (1 / player.fps)) {\n        player.accumulator -= (1 / player.fps)\n        player.frame++\n      }\n      if (player.frame > 1) {\n        player.frame = 1\n      }\n\n      if (!(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('down')) {\n        player.setSprite('crouch-stand')\n        player.fps = 32\n        return\n      }\n    },\n    ['crouch-stand']: (dt) => {\n      if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) {\n        player.facing = LEFT\n      } else if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left')) {\n        player.facing = RIGHT\n      }\n\n      if (!player.grounded) {\n        player.setSprite('fall')\n        return\n      }\n\n      player.accumulator += dt\n      while (player.accumulator >= (1 / player.fps)) {\n        player.accumulator -= (1 / player.fps)\n        player.frame++\n      }\n      if (player.frame > 1) {\n        player.setSprite('idle')\n      }\n    },\n  }\n\n  player.update = (dt) => {\n    const lastPlayerX = player.x\n    player.x += player.xSpeed * dt\n\n    if (player.gravity) {\n      player.ySpeed += GRAVITY * dt\n      player.ySpeed = Math.min(player.ySpeed, MAX_Y_SPEED)\n      player.y += player.ySpeed * dt\n\n      // const nextPlayerX = player.x + player.xSpeed * dt\n      // player.x = nextPlayerX\n\n      const GROUND = (0,_collision_map_mjs__WEBPACK_IMPORTED_MODULE_3__.getGroundHeightByX)(Math.floor(player.x + PLAYER_WIDTH)) - (PLAYER_HEIGHT * 2)\n\n      if (player.grounded) {\n        if (Math.abs(player.y - GROUND) < 30) {\n          player.y = GROUND\n        }\n      }\n\n      if (player.y >= GROUND) {\n        if (player.y > GROUND + 30 && player.y < GROUND + 80) {\n          player.ySpeed = 0\n          player.grounded = true\n          player.vault(GROUND)\n        } else if (player.y < GROUND + 30) {\n          player.grounded = true\n          player.ySpeed = 0\n          player.y = GROUND\n        } else {\n          player.x = lastPlayerX\n          const GROUND = (0,_collision_map_mjs__WEBPACK_IMPORTED_MODULE_3__.getGroundHeightByX)(Math.floor(player.x + PLAYER_WIDTH)) - (PLAYER_HEIGHT * 2)\n          if (Math.abs(player.y - GROUND) < 30 && player.ySpeed >= 0) {\n            player.y = GROUND\n            player.ySpeed = 0\n            player.grounded = true\n            player.push()\n          }\n        }\n      } else {\n        if (player.groundedCounter > FALL_TIME) {\n          player.grounded = false\n          player.groundedCounter = 0\n        } else {\n          player.groundedCounter += dt\n        }\n      }\n    }\n\n    player.states[player.sprite](dt)\n  }\n\n  player.jump = () => {\n    if (player.sprite === 'vault') {\n      const GROUND = (0,_collision_map_mjs__WEBPACK_IMPORTED_MODULE_3__.getGroundHeightByX)(Math.floor(player.x + PLAYER_WIDTH)) - (PLAYER_HEIGHT * 2)\n      player.y = GROUND\n      player.grounded = true\n    }\n    if (player.grounded) {\n      player.ySpeed = INITIAL_JUMP_SPEED\n      player.grounded = false\n      player.sprite = 'jump'\n      player.frame = 0\n      player.accumulator = 0\n      player.fps = 8\n      player.gravity = true\n    }\n  }\n\n  player.bounce = () => {\n      player.ySpeed = INITIAL_JUMP_SPEED * 0.75\n      player.grounded = false\n      player.sprite = 'jump'\n      player.frame = 0\n      player.accumulator = 0\n      player.fps = 8\n      player.gravity = true\n  }\n\n  player.respawn = () => {\n    player.x = player.startX\n    player.y = player.startY\n  }\n\n  player.push = () => {\n    player.setSprite('push')\n    player.fps = 0\n    player.frame = 0\n    player.xSpeed = 0\n    player.ySpeed = 0\n  }\n\n  player.vault = (ground) => {\n    player.setSprite('vault')\n    player.y = ground + 20\n    player.gravity = false\n    player.fps = 6\n    player.frame = 0\n    player.xSpeed = 0\n    player.grounded = true\n    player.ySpeed = 0\n  }\n\n  player.crouch = () => {\n    player.setSprite('crouch')\n    player.fps = 32\n    player.xSpeed = 0\n  }\n\n  player.move = () => {\n    if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right')) {\n      player.facing = LEFT\n      player.xSpeed = -MOVE_SPEED\n    } else if ((0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('right') && !(0,_controller_mjs__WEBPACK_IMPORTED_MODULE_2__.getActionState)('left')) {\n      player.facing = RIGHT\n      player.xSpeed = MOVE_SPEED\n    } else {\n      player.xSpeed = 0\n    }\n  }\n\n  player.render = (ctx, canvas) => {\n    const character = (0,_textures_mjs__WEBPACK_IMPORTED_MODULE_1__.getTextureByName)(\n      player.facing === _config_mjs__WEBPACK_IMPORTED_MODULE_0__.DIRECTION.RIGHT ?\n        player.sprite :\n        `${player.sprite}-left`\n    )\n    ctx.drawImage(\n      character,\n      player.frame * PLAYER_WIDTH,\n      0,\n      PLAYER_WIDTH,\n      PLAYER_HEIGHT,\n      player.x,\n      player.y,\n      PLAYER_WIDTH * 2,\n      PLAYER_HEIGHT * 2,\n    )\n  }\n\n  player.debugRender = (ctx, canvas) => {\n    ctx.beginPath()\n    const playerCollider = player.getCollider()\n    ctx.rect(playerCollider.x, playerCollider.y, playerCollider.width, playerCollider.height)\n    ctx.stroke()\n  }\n\n  return player\n}\n\n\n//# sourceURL=webpack://game-server/./src/player.mjs?");

/***/ }),

/***/ "./src/texture-data.mjs":
/*!******************************!*\
  !*** ./src/texture-data.mjs ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"playerTextures\": () => (/* binding */ playerTextures),\n/* harmony export */   \"playerTexturesShadow\": () => (/* binding */ playerTexturesShadow)\n/* harmony export */ });\nconst playerTextures = [\n  {\n    src: 'move.png',\n    name: 'running',\n  },\n  {\n    src: 'move-left.png',\n    name: 'running-left',\n  },\n  {\n    src: 'jump.png',\n    name: 'jump',\n  },\n  {\n    src: 'crouch.png',\n    name: 'crouch',\n  },\n  {\n    src: 'crouch-left.png',\n    name: 'crouch-left',\n  },\n  {\n    src: 'crouch-stand.png',\n    name: 'crouch-stand',\n  },\n  {\n    src: 'crouch-stand-left.png',\n    name: 'crouch-stand-left',\n  },\n  {\n    src: 'jump-left.png',\n    name: 'jump-left',\n  },\n  {\n    src: 'fall.png',\n    name: 'fall',\n  },\n  {\n    src: 'fall-left.png',\n    name: 'fall-left',\n  },\n  {\n    src: 'land.png',\n    name: 'land',\n  },\n  {\n    src: 'land-left.png',\n    name: 'land-left',\n  },\n  {\n    src: 'stand.png',\n    name: 'idle',\n  },\n  {\n    src: 'stand-left.png',\n    name: 'idle-left',\n  },\n  {\n    src: 'vault.png',\n    name: 'vault',\n  },\n  {\n    src: 'vault-left.png',\n    name: 'vault-left',\n  },\n  {\n    src: 'push.png',\n    name: 'push',\n  },\n  {\n    src: 'push-left.png',\n    name: 'push-left',\n  },\n]\n\nconst playerTexturesShadow = [\n  {\n    src: 'move-shadow.png',\n    name: 'running-shadow',\n  },\n  {\n    src: 'move-shadow-left.png',\n    name: 'running-shadow-left',\n  },\n  {\n    src: 'jump-shadow.png',\n    name: 'jump-shadow',\n  },\n  {\n    src: 'crouch-shadow.png',\n    name: 'crouch-shadow',\n  },\n  {\n    src: 'crouch-shadow-left.png',\n    name: 'crouch-shadow-left',\n  },\n  {\n    src: 'crouch-stand-shadow.png',\n    name: 'crouch-stand-shadow',\n  },\n  {\n    src: 'crouch-stand-shadow-left.png',\n    name: 'crouch-stand-shadow-left',\n  },\n  {\n    src: 'jump-shadow-left.png',\n    name: 'jump-shadow-left',\n  },\n  {\n    src: 'fall-shadow.png',\n    name: 'fall-shadow',\n  },\n  {\n    src: 'fall-shadow-left.png',\n    name: 'fall-shadow-left',\n  },\n  {\n    src: 'land-shadow.png',\n    name: 'land-shadow',\n  },\n  {\n    src: 'land-shadow-left.png',\n    name: 'land-shadow-left',\n  },\n  {\n    src: 'stand-shadow.png',\n    name: 'idle-shadow',\n  },\n  {\n    src: 'stand-shadow-left.png',\n    name: 'idle-shadow-left',\n  },\n  {\n    src: 'vault-shadow.png',\n    name: 'vault-shadow',\n  },\n  {\n    src: 'vault-shadow-left.png',\n    name: 'vault-shadow-left',\n  },\n  {\n    src: 'push-shadow.png',\n    name: 'push-shadow',\n  },\n  {\n    src: 'push-shadow-left.png',\n    name: 'push-shadow-left',\n  },\n]\n\n\n//# sourceURL=webpack://game-server/./src/texture-data.mjs?");

/***/ }),

/***/ "./src/textures.mjs":
/*!**************************!*\
  !*** ./src/textures.mjs ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getTextureByName\": () => (/* binding */ getTextureByName),\n/* harmony export */   \"loadTextures\": () => (/* binding */ loadTextures)\n/* harmony export */ });\nconst textures = {}\n\nconst loadTextures = async (texturesData) =>\n  new Promise((resolve, reject) => {\n    const images = {}\n    texturesData.forEach(textureData => {\n      const image = new Image()\n      image.src = textureData.src\n      image.onload = () => {\n        images[textureData.name] = image\n        textures[textureData.name] = image\n        if (Object.keys(images).length === texturesData.length) {\n          resolve(images)\n        }\n      }\n    })\n  })\n\nconst getTextureByName = name => textures[name] || null\n\n\n//# sourceURL=webpack://game-server/./src/textures.mjs?");

/***/ })

}]);